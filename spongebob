#Write a function called mock. mock should take one
#parameter, a string. You may assume that the string will
#have only lowercase letters and spaces.
#
#Your function should return the same string, but any letter
#at an even index should be converted to uppercase.
#
#For example: mock("abcd efgh ijkl") would return
#"AbCd eFgH IjKl".
#
#Remember, you can use the ordinal function ord() to get the
#number associated with a single letter. For example,
#ord("a") returns 97. The number associated with lowercase
#letters is always 32 larger than the number associated with
#the equivalent uppercase letter. ord("a") is 97, and
#ord("A") is 65. ord("z") is 122, and ord("Z") is 90.
#
#Remember, you can use the character function chr() to
#convert a number back to a letter. For example, chr(65) will
#return "A".
#
#HINT: Treat all characters the same initially, then worry
#about taking care of spaces afterwards.


#Write your function here!
def mock(value):
    string_length = len(value)
    new = ""
    change = ""
#    print(string_length)
    for i in range(0,string_length):
        
        if i%2 == 0 and ord(value[i])>90:
            change = value[i].upper()
            new=new+change   
        else:
            new = new + value[i]
#        new=new+change
    return new
                              
                            


#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print: "A square with side length 4 has an area of 16".

print(mock("abcd efgh ijkl"), end='')


#answer key
#First thing's first: we need to define our function:
def mock(a_str):
    
    #There are a lot of ways to go from here. My personal
    #approach would be to create a new string, and build
    #that over time. So, let's create a new empty string:
    
    result = ""
    
    #Next we want to iterate through each character in the
    #string. However, we need to track whether the current
    #letter's index is even or odd, so let's use a for
    #loop instead of a for-each loop: that way we have the
    #current index stored in i:
    for i in range(len(a_str)):
        
        #Then we need to get the actual character:
        current_char = a_str[i]
        
        #Now we have a decision to make. When do we want to
        #change the current character? We want to change it
        #if (a) its index is even, and (b) if it isn't a
        #space. So, that's our conditional:
        if i % 2 == 0 and not current_char == " ":
            
            #This block runs if the index is even and the
            #character is a lowercase letter. So, we know
            #that current_char is a lower-case letter. So,
            #let's first find its ordinal:
            current_char_ord = ord(current_char)
            
            #Now let's find the ordinal of its uppercase
            #version. We know that that's always 32 less
            #from the exercise directions:
            new_char_ord = current_char_ord - 32
            
            #Now let's convert the new ordinal back to a
            #character:
            new_char = chr(new_char_ord)
            
            #Finally, let's add it to the string:
            result += new_char
            
            #We did that step-by-step, but it could have
            #all been done in one line as well:
            #result += chr(ord(current_char)-32)
            
        else:
            
            #If current character was a space or it was
            #at an odd index, we just add it to the string
            #as-is:
            result += current_char
            
    #Once we're done building the string, we return the
    #result:
    return result
        



print(mock("abcd efgh ijkl"))



